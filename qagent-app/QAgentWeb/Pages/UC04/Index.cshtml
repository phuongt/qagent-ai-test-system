@page
@model QAgentWeb.Pages.UC04.IndexModel
@{
    ViewData["Title"] = "UC04 - Screen Management";
}

<div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
        <h1 class="text-3xl font-bold text-gray-800">Screen Management</h1>
        <a href="/UC04/upload" class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-lg transition duration-200">
            <i class="fas fa-upload mr-2"></i>Upload Screens
        </a>
    </div>

    <!-- Filter & Search -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Search Screens</label>
                <input type="text" placeholder="Search by name..." 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500">
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Screen Type</label>
                <select class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500">
                    <option value="">All Types</option>
                    <option value="Wireframe">Wireframe</option>
                    <option value="Mockup">Mockup</option>
                    <option value="Prototype">Prototype</option>
                    <option value="Screenshot">Screenshot</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Priority</label>
                <select class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500">
                    <option value="">All Priorities</option>
                    <option value="High">High</option>
                    <option value="Medium">Medium</option>
                    <option value="Low">Low</option>
                </select>
            </div>
            <div class="flex items-end">
                <button class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-md transition duration-200">
                    <i class="fas fa-search mr-2"></i>Filter
                </button>
            </div>
        </div>
    </div>

    <!-- Screens Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        @if (Model.Screens != null && Model.Screens.Any())
        {
            @foreach (var screen in Model.Screens)
            {
                <div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition duration-200">
                    <!-- Screen Preview -->
                    <div class="h-48 bg-gray-200 flex items-center justify-center relative">
                        @if (!string.IsNullOrEmpty(screen.FilePath))
                        {
                            <div class="image-with-fallback">
                                <img src="@screen.FilePath" alt="@screen.Name" 
                                     onerror="handleImageError(this)"
                                     class="max-w-full max-h-full object-contain cursor-pointer"
                                     onclick="showImageModal('@screen.FilePath', '@screen.Name')">
                                <!-- Fallback default image -->
                                <div class="fallback default-image-placeholder" onclick="showDefaultImageModal('@screen.Name')">
                                    <i class="fas fa-image"></i>
                                    <span class="title">Image Not Available</span>
                                    <span class="subtitle">Click to view details</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="default-image-placeholder" onclick="showDefaultImageModal('@screen.Name')">
                                <i class="fas fa-image"></i>
                                <span class="title">No Preview Available</span>
                                <span class="subtitle">Click to view details</span>
                            </div>
                        }
                        
                        <!-- Priority Badge -->
                        <div class="absolute top-2 right-2">
                            <span class="px-2 py-1 text-xs rounded-full @(screen.Priority == "High" ? "bg-red-100 text-red-800" : screen.Priority == "Medium" ? "bg-yellow-100 text-yellow-800" : "bg-green-100 text-green-800")">
                                @screen.Priority
                            </span>
                        </div>
                        
                        <!-- Screen Type Badge -->
                        <div class="absolute top-2 left-2">
                            <span class="px-2 py-1 text-xs rounded-full bg-purple-100 text-purple-800">
                                @screen.ScreenType
                            </span>
                        </div>
                    </div>
                    
                    <div class="p-4">
                        <h3 class="text-lg font-semibold text-gray-800 mb-2">@screen.Name</h3>
                        <p class="text-gray-600 text-sm mb-3">@screen.Description</p>
                        
                        <div class="space-y-2 mb-4">
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-500">Project:</span>
                                <span class="font-medium">@(screen.Project?.Name ?? "N/A")</span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-500">File Size:</span>
                                <span class="font-medium">@string.Format("{0:F1}", screen.FileSizeBytes / 1024.0) KB</span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-500">Complexity:</span>
                                <div class="flex items-center">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <i class="fas fa-star text-xs @(i <= screen.ComplexityScore ? "text-yellow-400" : "text-gray-300")"></i>
                                    }
                                    <span class="ml-1 text-xs">(@screen.ComplexityScore/5)</span>
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(screen.AnalysisStatus))
                            {
                                <div class="flex justify-between text-sm">
                                    <span class="text-gray-500">Analysis:</span>
                                    <span class="px-2 py-1 text-xs rounded-full @(screen.AnalysisStatus == "Completed" ? "bg-green-100 text-green-800" : screen.AnalysisStatus == "InProgress" ? "bg-blue-100 text-blue-800" : "bg-gray-100 text-gray-800")">
                                        @screen.AnalysisStatus
                                    </span>
                                </div>
                            }
                        </div>

                        <div class="flex space-x-2">
                            <a href="/UC04/details/@screen.Id" 
                               class="flex-1 bg-purple-600 hover:bg-purple-700 text-white text-center py-2 px-3 rounded text-sm transition duration-200">
                                <i class="fas fa-eye mr-1"></i>View
                            </a>
                            <a href="/UC04/edit/@screen.Id" 
                               class="flex-1 bg-blue-600 hover:bg-blue-700 text-white text-center py-2 px-3 rounded text-sm transition duration-200">
                                <i class="fas fa-edit mr-1"></i>Edit
                            </a>
                            @if (!string.IsNullOrEmpty(screen.GoogleDriveFileUrl))
                            {
                                <a href="@screen.GoogleDriveFileUrl" target="_blank"
                                   class="bg-green-600 hover:bg-green-700 text-white py-2 px-3 rounded text-sm transition duration-200">
                                    <i class="fab fa-google-drive"></i>
                                </a>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-span-full text-center py-12">
                <div class="text-gray-500 text-lg mb-4">
                    <i class="fas fa-images text-4xl mb-4"></i>
                    <p>No screens found</p>
                </div>
                <a href="/UC04/upload" class="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-lg transition duration-200">
                    <i class="fas fa-upload mr-2"></i>Upload First Screen
                </a>
            </div>
        }
    </div>

    <!-- Statistics -->
    <div class="mt-8 grid grid-cols-1 md:grid-cols-6 gap-4">
        <div class="bg-white rounded-lg shadow-md p-6 text-center">
            <div class="text-3xl font-bold text-purple-600">@(Model.Screens?.Count() ?? 0)</div>
            <div class="text-gray-600">Total Screens</div>
        </div>
        <div class="bg-white rounded-lg shadow-md p-6 text-center">
            <div class="text-3xl font-bold text-blue-600">@(Model.Screens?.Count(s => s.ScreenType == "Wireframe") ?? 0)</div>
            <div class="text-gray-600">Wireframes</div>
        </div>
        <div class="bg-white rounded-lg shadow-md p-6 text-center">
            <div class="text-3xl font-bold text-green-600">@(Model.Screens?.Count(s => s.ScreenType == "Mockup") ?? 0)</div>
            <div class="text-gray-600">Mockups</div>
        </div>
        <div class="bg-white rounded-lg shadow-md p-6 text-center">
            <div class="text-3xl font-bold text-red-600">@(Model.Screens?.Count(s => s.Priority == "High") ?? 0)</div>
            <div class="text-gray-600">High Priority</div>
        </div>
        <div class="bg-white rounded-lg shadow-md p-6 text-center">
            <div class="text-3xl font-bold text-yellow-600">@(Model.Screens?.Count(s => s.AnalysisStatus == "Completed") ?? 0)</div>
            <div class="text-gray-600">Analyzed</div>
        </div>
        <div class="bg-white rounded-lg shadow-md p-6 text-center">
            <div class="text-3xl font-bold text-indigo-600">@string.Format("{0:F1}", Model.Screens?.Sum(s => s.FileSizeBytes) / 1024.0 / 1024.0) MB</div>
            <div class="text-gray-600">Total Size</div>
        </div>
    </div>
</div>

<!-- Image Modal -->
<div id="imageModal" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0, 0, 0, 0.5); display: none; z-index: 50; align-items: center; justify-content: center; padding: 1rem;">
    <div style="background: white; border-radius: 0.5rem; max-width: 64rem; max-height: 100%; overflow: auto;">
        <div style="padding: 1rem; border-bottom: 1px solid #e5e7eb;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <h3 id="imageModalTitle" style="font-size: 1.125rem; font-weight: 600; margin: 0;"></h3>
                <button onclick="closeImageModal()" style="color: #6b7280; background: none; border: none; cursor: pointer; font-size: 1.25rem;">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <div style="padding: 1rem;">
            <img id="imageModalImg" src="" alt="" style="max-width: 100%; height: auto;">
        </div>
    </div>
</div>

@section Scripts {
<script>
// Handle image loading errors
function handleImageError(img) {
    img.style.display = 'none';
    img.classList.add('error');
    const fallback = img.nextElementSibling;
    if (fallback && fallback.classList.contains('fallback')) {
        fallback.style.display = 'flex';
    }
}

function showImageModal(imagePath, title) {
    // Check if image exists and can be loaded
    const testImg = new Image();
    testImg.onload = function() {
        document.getElementById('imageModalImg').src = imagePath;
        document.getElementById('imageModalTitle').textContent = title;
        document.getElementById('imageModal').style.display = 'flex';
    };
    testImg.onerror = function() {
        // If image fails to load, show default modal instead
        showDefaultImageModal(title);
    };
    testImg.src = imagePath;
}

function showDefaultImageModal(title) {
    // Create a default image for the modal
    const defaultImageHtml = `
        <div class="default-image-placeholder" style="width: 600px; height: 400px; border-radius: 0.5rem;">
            <i class="fas fa-image" style="font-size: 4rem; margin-bottom: 1rem; opacity: 0.8;"></i>
            <h3 style="font-size: 1.5rem; font-weight: 600; margin-bottom: 0.5rem;">No Image Preview</h3>
            <p style="font-size: 1rem; opacity: 0.9; text-align: center; margin: 0;">Screen image not available<br>Upload an image to see preview</p>
        </div>
    `;
    
    document.getElementById('imageModalTitle').textContent = title + ' - Default Preview';
    const imgContainer = document.getElementById('imageModalImg').parentElement;
    imgContainer.innerHTML = defaultImageHtml;
    document.getElementById('imageModal').style.display = 'flex';
}

function closeImageModal() {
    // Reset the image modal content back to normal img tag
    const imgContainer = document.querySelector('#imageModal [style*="padding: 1rem"]');
    if (imgContainer) {
        imgContainer.innerHTML = '<img id="imageModalImg" src="" alt="" style="max-width: 100%; height: auto;">';
    }
    document.getElementById('imageModal').style.display = 'none';
}
</script>
} 