@page "/uc01"
@model QAgentWeb.Pages.UC01.IndexModel
@using Microsoft.Extensions.Localization
@using QAgentWeb.Resources
@inject IStringLocalizer<SharedResource> Localizer
@{
    ViewData["Title"] = "UC01 - Upload & Qu·∫£n l√Ω d·ªØ li·ªáu nghi·ªáp v·ª•";
    ViewData["Description"] = "Upload UI screenshots v√† m√¥ t·∫£ nghi·ªáp v·ª• - UC01";
}

<div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 mb-2">üì§ Upload & Qu·∫£n l√Ω d·ªØ li·ªáu nghi·ªáp v·ª•</h1>
        <p class="text-gray-600">Upload UI screenshots v√† m√¥ t·∫£ nghi·ªáp v·ª• ƒë·ªÉ h·ªá th·ªëng ph√¢n t√≠ch v√† sinh checklist/test case t·ª± ƒë·ªông</p>
    </div>

    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6">
            @TempData["SuccessMessage"]
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
            @TempData["ErrorMessage"]
        </div>
    }

    <!-- Upload Form -->
    <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
        <h2 class="text-xl font-semibold text-gray-800 mb-6">üÜï T·∫°o Project m·ªõi</h2>
        
        <form method="post" enctype="multipart/form-data" id="uploadForm">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <!-- Project Name -->
                <div>
                    <label for="ProjectName" class="block text-sm font-medium text-gray-700 mb-2">T√™n Project *</label>
                    <input type="text" id="ProjectName" name="ProjectName" required
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                           placeholder="Nh·∫≠p t√™n project...">
                </div>

                <!-- Domain Selection -->
                <div>
                    <label for="Domain" class="block text-sm font-medium text-gray-700 mb-2">Domain *</label>
                    <select id="Domain" name="Domain" required
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                        <option value="">Ch·ªçn domain...</option>
                        <option value="CRM">CRM - Customer Relationship Management</option>
                        <option value="SPA">SPA - Single Page Application</option>
                        <option value="B2B">B2B - Business to Business</option>
                        <option value="ERP">ERP - Enterprise Resource Planning</option>
                        <option value="Mobile">Mobile Application</option>
                        <option value="Web">Web Application</option>
                        <option value="API">API Service</option>
                    </select>
                </div>
            </div>

            <!-- Description -->
            <div class="mb-6">
                <label for="Description" class="block text-sm font-medium text-gray-700 mb-2">M√¥ t·∫£ nghi·ªáp v·ª•</label>
                <textarea id="Description" name="Description" rows="4"
                          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                          placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ nghi·ªáp v·ª•, quy tr√¨nh, y√™u c·∫ßu..."></textarea>
            </div>

            <!-- File Upload Area -->
            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">Upload UI Screenshots & Documents</label>
                <div id="dropZone" class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center bg-gray-50 hover:bg-gray-100 transition-colors cursor-pointer">
                    <div id="dropContent">
                        <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                            <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                        <p class="text-lg text-gray-600 mb-2">K√©o & th·∫£ files v√†o ƒë√¢y ho·∫∑c <span class="text-blue-600 font-medium">browse</span></p>
                        <p class="text-sm text-gray-500">H·ªó tr·ª£ JPG, PNG, PDF (t·ªëi ƒëa 10MB m·ªói file)</p>
                    </div>
                    <input type="file" id="fileInput" name="UploadFiles" multiple accept=".jpg,.jpeg,.png,.pdf" class="hidden">
                </div>
                
                <!-- File Preview Area -->
                <div id="filePreview" class="mt-4 grid grid-cols-2 md:grid-cols-4 gap-4"></div>
            </div>

            <!-- Submit Button -->
            <div class="flex justify-end">
                <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-md font-medium transition-colors">
                    üöÄ T·∫°o Project & Upload Files
                </button>
            </div>
        </form>
    </div>

    <!-- Projects List -->
    <div class="bg-white rounded-lg shadow-lg p-6">
        <h2 class="text-xl font-semibold text-gray-800 mb-6">üìã Projects ƒë√£ t·∫°o</h2>
        
        @if (Model.Projects?.Any() == true)
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                @foreach (var project in Model.Projects)
                {
                    <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                        <div class="flex justify-between items-start mb-3">
                            <h3 class="text-lg font-semibold text-gray-900">@project.Name</h3>
                            <span class="bg-green-100 text-green-800 px-2 py-1 text-xs rounded-full">@project.Status</span>
                        </div>
                        
                        <div class="mb-3">
                            <span class="inline-block bg-blue-100 text-blue-800 px-2 py-1 text-xs rounded mr-2">@project.Domain</span>
                            <span class="text-sm text-gray-500">@project.Screens?.Count() files</span>
                        </div>
                        
                        <p class="text-gray-600 text-sm mb-4">@project.Description</p>
                        
                        <div class="flex justify-between items-center text-sm">
                            <span class="text-gray-500">@project.CreatedAt.ToString("dd/MM/yyyy")</span>
                            <div class="flex space-x-2">
                                <a href="/UC02?projectId=@project.Id" class="text-blue-600 hover:text-blue-800">Xem</a>
                                <button onclick="deleteProject('@project.Id')" class="text-red-600 hover:text-red-800">X√≥a</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-12">
                <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                </svg>
                <p class="text-gray-500 text-lg mb-4">Ch∆∞a c√≥ project n√†o</p>
                <p class="text-gray-400">T·∫°o project ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu!</p>
            </div>
        }
    </div>
</div>

<script>
// Drag & Drop Functionality
const dropZone = document.getElementById('dropZone');
const fileInput = document.getElementById('fileInput');
const filePreview = document.getElementById('filePreview');

dropZone.addEventListener('click', () => fileInput.click());

dropZone.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropZone.classList.add('border-blue-500', 'bg-blue-50');
});

dropZone.addEventListener('dragleave', () => {
    dropZone.classList.remove('border-blue-500', 'bg-blue-50');
});

dropZone.addEventListener('drop', (e) => {
    e.preventDefault();
    dropZone.classList.remove('border-blue-500', 'bg-blue-50');
    
    const files = Array.from(e.dataTransfer.files);
    handleFiles(files);
});

fileInput.addEventListener('change', (e) => {
    const files = Array.from(e.target.files);
    handleFiles(files);
});

function handleFiles(files) {
    filePreview.innerHTML = '';
    
    files.forEach((file, index) => {
        if (validateFile(file)) {
            createFilePreview(file, index);
        }
    });
}

function validateFile(file) {
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf'];
    const maxSize = 10 * 1024 * 1024; // 10MB
    
    if (!allowedTypes.includes(file.type)) {
        alert(`File ${file.name} kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng cho ph√©p (JPG, PNG, PDF)`);
        return false;
    }
    
    if (file.size > maxSize) {
        alert(`File ${file.name} v∆∞·ª£t qu√° 10MB`);
        return false;
    }
    
    return true;
}

function createFilePreview(file, index) {
    const div = document.createElement('div');
    div.className = 'border border-gray-200 rounded-lg p-3 bg-gray-50';
    
    const isImage = file.type.startsWith('image/');
    
    div.innerHTML = `
        <div class="flex items-center space-x-3">
            <div class="flex-shrink-0">
                ${isImage ? 
                    `<img src="${URL.createObjectURL(file)}" class="w-12 h-12 object-cover rounded" alt="Preview">` :
                    `<div class="w-12 h-12 bg-red-100 rounded flex items-center justify-center">
                        <svg class="w-6 h-6 text-red-600" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M4 18h12V6h-4V2H4v16zm-2 1V1a1 1 0 011-1h8l4 4v14a1 1 0 01-1 1H3a1 1 0 01-1-1z"/>
                        </svg>
                    </div>`
                }
            </div>
            <div class="flex-1 min-w-0">
                <p class="text-sm font-medium text-gray-900 truncate">${file.name}</p>
                <p class="text-xs text-gray-500">${(file.size / 1024 / 1024).toFixed(2)} MB</p>
            </div>
            <button type="button" onclick="removeFile(${index})" class="text-red-600 hover:text-red-800">
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z"/>
                </svg>
            </button>
        </div>
    `;
    
    filePreview.appendChild(div);
}

function removeFile(index) {
    const dt = new DataTransfer();
    const files = Array.from(fileInput.files);
    
    files.forEach((file, i) => {
        if (i !== index) dt.items.add(file);
    });
    
    fileInput.files = dt.files;
    handleFiles(Array.from(fileInput.files));
}

function deleteProject(id) {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a project n√†y?')) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '?handler=Delete';
        
        const input = document.createElement('input');
        input.type = 'hidden';
        input.name = 'id';
        input.value = id;
        
        const token = document.createElement('input');
        token.type = 'hidden';
        token.name = '__RequestVerificationToken';
        token.value = document.querySelector('[name="__RequestVerificationToken"]').value;
        
        form.appendChild(input);
        form.appendChild(token);
        document.body.appendChild(form);
        form.submit();
    }
}
</script> 