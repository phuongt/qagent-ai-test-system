---
description: 
globs: *.cshtml
alwaysApply: false
---
# Localization & SEO Optimization cho ASP.NET Core

## Critical Rules

- **Resource Files**: T·∫°o .resx files trong folder `Resources/` theo naming convention
- **Culture Middleware**: C·∫•u h√¨nh RequestLocalizationOptions trong Program.cs
- **SEO Metadata**: M·ªói page ph·∫£i c√≥ Title, Description, Keywords, OG tags
- **Structured Data**: Implement JSON-LD schema markup
- **Sitemap Generation**: T·ª± ƒë·ªông generate sitemap.xml v·ªõi multilingual URLs
- **Canonical URLs**: Th√™m canonical tags cho m·ªói page
- **Hreflang Tags**: Implement hreflang cho multilingual SEO
- **Culture Selection**: Cookie-based culture persistence
- **Resource Injection**: S·ª≠ d·ª•ng IStringLocalizer trong Page Models
- **URL Structure**: SEO-friendly URLs v·ªõi culture code

## Examples

<example>
  // ‚úÖ Correct Resource File Structure
  Resources/
    Pages.Shared._Layout.vi.resx
    Pages.Shared._Layout.en.resx
    Pages.UC01.Index.vi.resx
    Pages.UC01.Index.en.resx
    
  // ‚úÖ Correct Program.cs Configuration
  builder.Services.AddLocalization(options => options.ResourcesPath = "Resources");
  builder.Services.AddRazorPages()
      .AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix)
      .AddDataAnnotationsLocalization();
      
  builder.Services.Configure<RequestLocalizationOptions>(options =>
  {
      var supportedCultures = new[] { "en", "vi" };
      options.SetDefaultCulture("vi")
             .AddSupportedCultures(supportedCultures)
             .AddSupportedUICultures(supportedCultures);
             
      options.RequestCultureProviders.Insert(0, new QueryStringRequestCultureProvider());
      options.RequestCultureProviders.Insert(1, new CookieRequestCultureProvider());
  });
  
  var app = builder.Build();
  app.UseRequestLocalization();
  
  // ‚úÖ Correct Page Model with Localization & SEO
  public class IndexModel : PageModel
  {
      private readonly IStringLocalizer<IndexModel> _localizer;
      private readonly IStringLocalizer<SharedResource> _sharedLocalizer;
      
      public IndexModel(
          IStringLocalizer<IndexModel> localizer,
          IStringLocalizer<SharedResource> sharedLocalizer)
      {
          _localizer = localizer;
          _sharedLocalizer = sharedLocalizer;
      }
      
      public void OnGet()
      {
          // SEO Metadata
          ViewData["Title"] = _localizer["PageTitle"];
          ViewData["Description"] = _localizer["PageDescription"];
          ViewData["Keywords"] = _localizer["PageKeywords"];
          ViewData["OgTitle"] = _localizer["OgTitle"];
          ViewData["OgDescription"] = _localizer["OgDescription"];
          ViewData["OgImage"] = Url.Content("~/images/og-image.jpg");
          ViewData["CanonicalUrl"] = Url.Page("/UC01/Index", new { culture = CultureInfo.CurrentCulture.Name });
          
          // Structured Data
          ViewData["JsonLd"] = GenerateJsonLd();
      }
      
      private string GenerateJsonLd()
      {
          return JsonSerializer.Serialize(new
          {
              context = "https://schema.org",
              type = "WebPage",
              name = _localizer["PageTitle"].Value,
              description = _localizer["PageDescription"].Value,
              url = ViewData["CanonicalUrl"]
          });
      }
  }
  
  // ‚úÖ Correct _Layout.cshtml v·ªõi SEO v√† Hreflang
  <!DOCTYPE html>
  <html lang="@CultureInfo.CurrentCulture.TwoLetterISOLanguageName">
  <head>
      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      
      <!-- SEO Meta Tags -->
      <title>@ViewData["Title"] - @_sharedLocalizer["SiteName"]</title>
      <meta name="description" content="@ViewData["Description"]" />
      <meta name="keywords" content="@ViewData["Keywords"]" />
      <link rel="canonical" href="@ViewData["CanonicalUrl"]" />
      
      <!-- Open Graph -->
      <meta property="og:title" content="@ViewData["OgTitle"]" />
      <meta property="og:description" content="@ViewData["OgDescription"]" />
      <meta property="og:image" content="@ViewData["OgImage"]" />
      <meta property="og:url" content="@ViewData["CanonicalUrl"]" />
      <meta property="og:type" content="website" />
      <meta property="og:locale" content="@CultureInfo.CurrentCulture.Name.Replace("-", "_")" />
      
      <!-- Hreflang Tags -->
      <link rel="alternate" hreflang="vi" href="@Url.Page(ViewContext.RouteData.Values["page"].ToString(), new { culture = "vi" })" />
      <link rel="alternate" hreflang="en" href="@Url.Page(ViewContext.RouteData.Values["page"].ToString(), new { culture = "en" })" />
      <link rel="alternate" hreflang="x-default" href="@Url.Page(ViewContext.RouteData.Values["page"].ToString(), new { culture = "vi" })" />
      
      <!-- Structured Data -->
      @if (ViewData["JsonLd"] != null)
      {
          <script type="application/ld+json">
              @Html.Raw(ViewData["JsonLd"])
          </script>
      }
  </head>
  
  // ‚úÖ Correct Sitemap.cshtml.cs
  public class SitemapModel : PageModel
  {
      public async Task<IActionResult> OnGetAsync()
      {
          var sitemap = GenerateSitemap();
          return Content(sitemap, "application/xml");
      }
      
      private string GenerateSitemap()
      {
          var urls = new List<SitemapUrl>
          {
              new("/", new[] { "vi", "en" }),
              new("/UC01", new[] { "vi", "en" }),
              new("/UC02", new[] { "vi", "en" })
              // Add more URLs
          };
          
          var xml = new StringBuilder();
          xml.AppendLine("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
          xml.AppendLine("<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">");
          
          foreach (var url in urls)
          {
              foreach (var culture in url.Cultures)
              {
                  xml.AppendLine("<url>");
                  xml.AppendLine($"<loc>{Request.Scheme}://{Request.Host}{url.Path}?culture={culture}</loc>");
                  xml.AppendLine($"<lastmod>{DateTime.UtcNow:yyyy-MM-dd}</lastmod>");
                  xml.AppendLine("<changefreq>weekly</changefreq>");
                  xml.AppendLine("<priority>0.8</priority>");
                  
                  // Hreflang alternates
                  foreach (var altCulture in url.Cultures)
                  {
                      xml.AppendLine($"<xhtml:link rel=\"alternate\" hreflang=\"{altCulture}\" href=\"{Request.Scheme}://{Request.Host}{url.Path}?culture={altCulture}\" />");
                  }
                  
                  xml.AppendLine("</url>");
              }
          }
          
          xml.AppendLine("</urlset>");
          return xml.ToString();
      }
  }
  
  // ‚úÖ Correct Culture Selection Component
  @* Pages/Shared/Components/_CultureSelector.cshtml *@
  <div class="relative inline-block text-left">
      <select id="culture-selector" 
              class="block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              onchange="changeCulture(this.value)">
          <option value="vi" @(CultureInfo.CurrentCulture.Name == "vi" ? "selected" : "")>üáªüá≥ Ti·∫øng Vi·ªát</option>
          <option value="en" @(CultureInfo.CurrentCulture.Name == "en" ? "selected" : "")>üá∫üá∏ English</option>
      </select>
  </div>
  
  <script>
      function changeCulture(culture) {
          const url = new URL(window.location);
          url.searchParams.set('culture', culture);
          
          // Set cookie for persistence
          document.cookie = `culture=${culture}; path=/; max-age=31536000`; // 1 year
          
          window.location.href = url.toString();
      }
  </script>
</example>

<example type="invalid">
  // ‚ùå Sai: Hardcoded text thay v√¨ localization
  <h1>Welcome to our website</h1>
  <p>This is a description in English</p>
  // N√™n d√πng: @_localizer["WelcomeMessage"]
  
  // ‚ùå Sai: Thi·∫øu SEO metadata
  public void OnGet()
  {
      // Kh√¥ng set ViewData["Title"], ViewData["Description"]
  }
  
  // ‚ùå Sai: Kh√¥ng c√≥ canonical URL
  <head>
      <title>Page Title</title>
      <!-- Thi·∫øu canonical, og tags, hreflang -->
  </head>
  
  // ‚ùå Sai: Resource files kh√¥ng ƒë√∫ng naming convention
  Resources/
    UC01.resx  // Sai, n√™n l√† Pages.UC01.Index.vi.resx
    Layout.resx  // Sai, n√™n l√† Pages.Shared._Layout.vi.resx
  
  // ‚ùå Sai: Kh√¥ng c·∫•u h√¨nh culture middleware
  var app = builder.Build();
  // Thi·∫øu app.UseRequestLocalization();
  
  // ‚ùå Sai: Direct string thay v√¨ resource key
  ViewData["Title"] = "Trang ch·ªß"; // Hardcoded Vietnamese
  ViewData["Description"] = "Home page"; // Hardcoded English
  // N√™n d√πng: ViewData["Title"] = _localizer["HomePageTitle"];
  
  // ‚ùå Sai: Sitemap kh√¥ng multilingual
  <url>
      <loc>https://example.com/page</loc>
      <!-- Thi·∫øu culture variants v√† hreflang -->
  </url>
  
  // ‚ùå Sai: Kh√¥ng persistent culture selection
  function changeCulture(culture) {
      window.location.href = `?culture=${culture}`;
      // Thi·∫øu cookie ƒë·ªÉ l∆∞u preference
  }
</example>
