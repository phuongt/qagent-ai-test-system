#!/usr/bin/env pwsh

# =============================================================================
# COMPREHENSIVE DEFAULT IMAGE TESTING SCRIPT
# =============================================================================
# Ki·ªÉm tra t√≠nh nƒÉng hi·ªÉn th·ªã ·∫£nh m·∫∑c ƒë·ªãnh tr√™n trang UC02
# Author: QAgent AI Assistant
# Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
# =============================================================================

param(
    [string]$BaseUrl = "http://localhost:5174",
    [switch]$Verbose = $false
)

# Test configuration
$TestResults = @{
    CSSClasses = $false
    DefaultPlaceholders = $false  
    ImageErrorHandling = $false
    ModalFunctionality = $false
    JavaScriptFunctions = $false
    OverallSuccess = $false
}

$LogFile = "UC02_DEFAULT_IMAGE_TEST_$(Get-Date -Format 'yyyyMMdd_HHmmss').log"

function Write-TestLog {
    param([string]$Message, [string]$Level = "INFO")
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogMessage = "[$Timestamp] [$Level] $Message"
    Write-Host $LogMessage
    Add-Content -Path $LogFile -Value $LogMessage
}

function Test-ApplicationRunning {
    Write-TestLog "üîç Ki·ªÉm tra ·ª©ng d·ª•ng ƒëang ch·∫°y..."
    try {
        $response = Invoke-WebRequest -Uri $BaseUrl -TimeoutSec 10 -UseBasicParsing
        if ($response.StatusCode -eq 200) {
            Write-TestLog "‚úÖ ·ª®ng d·ª•ng ƒëang ch·∫°y t·∫°i $BaseUrl" "SUCCESS"
            return $true
        }
    }
    catch {
        Write-TestLog "‚ùå ·ª®ng d·ª•ng kh√¥ng ch·∫°y: $($_.Exception.Message)" "ERROR"
        return $false
    }
    return $false
}

function Test-CSSClasses {
    Write-TestLog "üé® Ki·ªÉm tra CSS classes cho default image..."
    try {
        $cssPath = "qagent-app/QAgentWeb/wwwroot/css/site.css"
        $cssContent = Get-Content -Path $cssPath -Raw
        
        $requiredClasses = @(
            ".default-image-placeholder",
            ".image-with-fallback", 
            ".fallback"
        )
        
        $allClassesFound = $true
        foreach ($class in $requiredClasses) {
            if ($cssContent -notmatch [regex]::Escape($class)) {
                Write-TestLog "‚ùå CSS class kh√¥ng t√¨m th·∫•y: $class" "ERROR"
                $allClassesFound = $false
            } else {
                Write-TestLog "‚úÖ CSS class t√¨m th·∫•y: $class" "SUCCESS"
            }
        }
        
        # Ki·ªÉm tra purple gradient background
        if ($cssContent -match "#667eea.*#764ba2" -or $cssContent -match "#764ba2.*#667eea") {
            Write-TestLog "‚úÖ Purple gradient background ƒë∆∞·ª£c t√¨m th·∫•y" "SUCCESS"
        } else {
            Write-TestLog "‚ùå Purple gradient background kh√¥ng t√¨m th·∫•y" "ERROR"
            $allClassesFound = $false
        }
        
        $TestResults.CSSClasses = $allClassesFound
        return $allClassesFound
    }
    catch {
        Write-TestLog "‚ùå L·ªói ki·ªÉm tra CSS: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

function Test-HTMLStructure {
    Write-TestLog "üèóÔ∏è Ki·ªÉm tra c·∫•u tr√∫c HTML trong UC02..."
    try {
        $htmlPath = "qagent-app/QAgentWeb/Pages/UC02/Index.cshtml"
        $htmlContent = Get-Content -Path $htmlPath -Raw
        
        $requiredElements = @(
            "default-image-placeholder",
            "image-with-fallback",
            "handleImageError",
            "showDefaultImageModal",
            "No Preview Available",
            "Image Not Available"
        )
        
        $allElementsFound = $true
        foreach ($element in $requiredElements) {
            if ($htmlContent -match [regex]::Escape($element)) {
                Write-TestLog "‚úÖ HTML element t√¨m th·∫•y: $element" "SUCCESS"
            } else {
                Write-TestLog "‚ùå HTML element kh√¥ng t√¨m th·∫•y: $element" "ERROR"
                $allElementsFound = $false
            }
        }
        
        $TestResults.DefaultPlaceholders = $allElementsFound
        return $allElementsFound
    }
    catch {
        Write-TestLog "‚ùå L·ªói ki·ªÉm tra HTML: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

function Test-JavaScriptFunctions {
    Write-TestLog "‚öôÔ∏è Ki·ªÉm tra JavaScript functions..."
    try {
        $htmlPath = "qagent-app/QAgentWeb/Pages/UC02/Index.cshtml"
        $htmlContent = Get-Content -Path $htmlPath -Raw
        
        $requiredFunctions = @(
            "function handleImageError",
            "function showImageModal",
            "function showDefaultImageModal", 
            "function closeImageModal"
        )
        
        $allFunctionsFound = $true
        foreach ($func in $requiredFunctions) {
            if ($htmlContent -match [regex]::Escape($func)) {
                Write-TestLog "‚úÖ JavaScript function t√¨m th·∫•y: $func" "SUCCESS"
            } else {
                Write-TestLog "‚ùå JavaScript function kh√¥ng t√¨m th·∫•y: $func" "ERROR"
                $allFunctionsFound = $false
            }
        }
        
        $TestResults.JavaScriptFunctions = $allFunctionsFound
        return $allFunctionsFound
    }
    catch {
        Write-TestLog "‚ùå L·ªói ki·ªÉm tra JavaScript: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

function Test-UC02Page {
    Write-TestLog "üåê Ki·ªÉm tra trang UC02..."
    try {
        $response = Invoke-WebRequest -Uri "$BaseUrl/UC02" -TimeoutSec 15
        
        # Ki·ªÉm tra status code
        if ($response.StatusCode -ne 200) {
            Write-TestLog "‚ùå UC02 page status code: $($response.StatusCode)" "ERROR"
            return $false
        }
        
        # Ki·ªÉm tra content c√≥ ch·ª©a "No Preview Available"
        if ($response.Content -match "No Preview Available") {
            Write-TestLog "‚úÖ Trang UC02 c√≥ hi·ªÉn th·ªã 'No Preview Available'" "SUCCESS"
        } else {
            Write-TestLog "‚ùå Trang UC02 kh√¥ng hi·ªÉn th·ªã 'No Preview Available'" "ERROR"
            return $false
        }
        
        # Ki·ªÉm tra CSS classes ƒë∆∞·ª£c load
        if ($response.Content -match "default-image-placeholder") {
            Write-TestLog "‚úÖ CSS classes ƒë∆∞·ª£c √°p d·ª•ng trong trang" "SUCCESS"
        } else {
            Write-TestLog "‚ùå CSS classes kh√¥ng ƒë∆∞·ª£c √°p d·ª•ng" "ERROR"
            return $false
        }
        
        $TestResults.ImageErrorHandling = $true
        $TestResults.ModalFunctionality = $true
        return $true
    }
    catch {
        Write-TestLog "‚ùå L·ªói ki·ªÉm tra trang UC02: $($_.Exception.Message)" "ERROR"
        return $false
    }
}

function Generate-TestReport {
    Write-TestLog "üìä T·∫°o b√°o c√°o test..."
    
    $totalTests = $TestResults.Keys.Count - 1  # Tr·ª´ OverallSuccess
    $passedTests = ($TestResults.GetEnumerator() | Where-Object { $_.Key -ne "OverallSuccess" -and $_.Value -eq $true }).Count
    $successRate = [math]::Round(($passedTests / $totalTests) * 100, 2)
    
    $TestResults.OverallSuccess = $passedTests -eq $totalTests
    
    Write-TestLog "=" * 60
    Write-TestLog "DEFAULT IMAGE FEATURE TEST REPORT"
    Write-TestLog "=" * 60
    Write-TestLog "Test Results:"
    Write-TestLog "  ‚úÖ CSS Classes: $(if($TestResults.CSSClasses) { 'PASS' } else { 'FAIL' })"
    Write-TestLog "  ‚úÖ Default Placeholders: $(if($TestResults.DefaultPlaceholders) { 'PASS' } else { 'FAIL' })"
    Write-TestLog "  ‚úÖ Image Error Handling: $(if($TestResults.ImageErrorHandling) { 'PASS' } else { 'FAIL' })"
    Write-TestLog "  ‚úÖ Modal Functionality: $(if($TestResults.ModalFunctionality) { 'PASS' } else { 'FAIL' })"
    Write-TestLog "  ‚úÖ JavaScript Functions: $(if($TestResults.JavaScriptFunctions) { 'PASS' } else { 'FAIL' })"
    Write-TestLog ""
    Write-TestLog "Summary:"
    Write-TestLog "  Total Tests: $totalTests"
    Write-TestLog "  Passed: $passedTests"
    Write-TestLog "  Failed: $($totalTests - $passedTests)"
    Write-TestLog "  Success Rate: $successRate%"
    Write-TestLog ""
    Write-TestLog "Overall Status: $(if($TestResults.OverallSuccess) { 'üéâ SUCCESS' } else { '‚ùå FAILED' })"
    Write-TestLog "=" * 60
    
    # T·∫°o file b√°o c√°o
    $reportContent = @"
# DEFAULT IMAGE FEATURE TEST REPORT
Generated: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

## Test Results

| Test Category | Status | Details |
|---------------|--------|---------|
| CSS Classes | $(if($TestResults.CSSClasses) { '‚úÖ PASS' } else { '‚ùå FAIL' }) | Ki·ªÉm tra c√°c class CSS c·∫ßn thi·∫øt |
| Default Placeholders | $(if($TestResults.DefaultPlaceholders) { '‚úÖ PASS' } else { '‚ùå FAIL' }) | Ki·ªÉm tra HTML structure v√† placeholders |
| Image Error Handling | $(if($TestResults.ImageErrorHandling) { '‚úÖ PASS' } else { '‚ùå FAIL' }) | Ki·ªÉm tra x·ª≠ l√Ω l·ªói ·∫£nh |
| Modal Functionality | $(if($TestResults.ModalFunctionality) { '‚úÖ PASS' } else { '‚ùå FAIL' }) | Ki·ªÉm tra ch·ª©c nƒÉng modal |
| JavaScript Functions | $(if($TestResults.JavaScriptFunctions) { '‚úÖ PASS' } else { '‚ùå FAIL' }) | Ki·ªÉm tra c√°c h√†m JavaScript |

## Summary
- **Total Tests:** $totalTests
- **Passed:** $passedTests  
- **Failed:** $($totalTests - $passedTests)
- **Success Rate:** $successRate%
- **Overall Status:** $(if($TestResults.OverallSuccess) { 'üéâ SUCCESS' } else { '‚ùå FAILED' })

## Features Tested
1. **CSS Default Image Classes**: Purple gradient background, proper styling
2. **HTML Structure**: Image containers with fallback elements
3. **JavaScript Error Handling**: handleImageError, showDefaultImageModal functions
4. **Modal System**: Image modal with default content support
5. **Page Integration**: UC02 page displays default images correctly

## Next Steps
$(if($TestResults.OverallSuccess) { 
'‚úÖ All tests passed! Default image feature is working correctly.' 
} else { 
'‚ùå Some tests failed. Review the log file for details and fix the issues.' })

---
*Test log saved to: $LogFile*
"@

    $reportFile = "UC02_DEFAULT_IMAGE_TEST_REPORT_$(Get-Date -Format 'yyyyMMdd_HHmmss').md"
    Set-Content -Path $reportFile -Value $reportContent
    Write-TestLog "üìÑ B√°o c√°o ƒë√£ ƒë∆∞·ª£c l∆∞u: $reportFile"
}

# Main execution
Write-TestLog "üöÄ B·∫Øt ƒë·∫ßu test t√≠nh nƒÉng Default Image..."
Write-TestLog "Target URL: $BaseUrl"

# Run tests
if (-not (Test-ApplicationRunning)) {
    Write-TestLog "‚ùå ·ª®ng d·ª•ng kh√¥ng ch·∫°y. H√£y ch·∫°y REBUILD_AND_RUN_BACKGROUND.ps1 tr∆∞·ªõc." "ERROR"
    exit 1
}

Write-TestLog "üß™ Ch·∫°y c√°c test cases..."

Test-CSSClasses
Test-HTMLStructure  
Test-JavaScriptFunctions
Test-UC02Page

Generate-TestReport

if ($TestResults.OverallSuccess) {
    Write-TestLog "üéâ T·∫§T C·∫¢ TEST TH√ÄNH C√îNG! Default image feature ho·∫°t ƒë·ªông ho√†n h·∫£o." "SUCCESS"
    exit 0
} else {
    Write-TestLog "‚ùå C√ì TEST TH·∫§T B·∫†I. Xem log ƒë·ªÉ bi·∫øt chi ti·∫øt." "ERROR"
    exit 1
} 